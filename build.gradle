plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url = "https://dl.bintray.com/ladysnake/libs/" }
    maven{ url="https://jitpack.io" }
    maven{ url="http://server.bbkr.space:8081/artifactory/libs-release/" }
    maven { url "https://dl.bintray.com/shedaniel/autoconfig1u/" }
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven {
        url = "https://maven.theillusivec4.top"
    }
    maven {
        name = "AdrianTodt's Maven"
        url = "https://dl.bintray.com/adriantodt/maven"
    }
    maven { url 'https://repo.repsy.io/mvn/fadookie/particleman' }
}

minecraft {
    accessWidener = file("src/main/resources/obsidian.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation ("com.lettuce.fudge:artifice:${project.artifice_version}") { exclude group: "net.fabricmc.fabric-api" }
    include ("com.lettuce.fudge:artifice:${project.artifice_version}") { exclude group: "net.fabricmc.fabric-api" }

    modImplementation ("io.github.vampirestudios:VampireLib-Fabric:2.2.0+build.3-20w46a") {
        exclude group: "net.fabricmc.fabric-api"
        exclude group: "io.github.cottonmc"
    }

    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:3.0.0-nightly.20w48a")
    include modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:3.0.0-nightly.20w48a")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {}
}
